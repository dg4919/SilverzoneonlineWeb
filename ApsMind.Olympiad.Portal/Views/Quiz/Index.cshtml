@model ApsMind.Olympiad.Framework.Entity.Quiz
@{
    ViewBag.Title = "Index";

    WebGrid grid = new WebGrid(ViewBag.QuizList, rowsPerPage: 10);
    TimeZoneInfo est = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
}
<div class="mar">
    <div class="row">
        <div class="col-md-12">
            <div class="page-title">
                <h2 class="">Test Paper::Index</h2>

            </div>
        </div>
    </div>
    @if (TempData["Message"] != null)
    {
        <div>
            <div class="alert alert-success">
                <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                <strong>Success!</strong>@TempData["Message"].
            </div>
            @*<span style="text-align:center; color:green;">@TempData["Message"]</span>*@
        </div>
    }
    @using (Html.BeginForm(FormMethod.Get))
    {

        <div class="page-header col-sm-12">
            <div class="row">
                <div class="form-group">

                    @Html.LabelFor(model => model.SubjectId, new { @class = "control-label col-md-2 col-sm-3" })

                    <div class="col-md-4 col-sm-8 col-xs-12">
                        @Html.DropDownListFor(model => model.SubjectId, new SelectList((SelectList)TempData["Subject"], "value", "text"), "--Select Subject--", new { @class = "form-control", @Id = "Subject" })
                        @Html.ValidationMessageFor(model => model.SubjectId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-2">Class<abbr title="required">*</abbr></label>
                    <div class="col-md-4 col-sm-8 col-xs-12">
                        @*@Html.DropDownList("subject", new SelectList(Model.SubjectId, "SubjectId", "SubjectName"), "--Select Subject--", new { @class = "form-control", @id = "subjectDropdown" })*@
                        @Html.DropDownList("Class", new SelectList(string.Empty, "Value", "Text"), "--Select Class--", new { @class = "form-control", @id = "classDropdown" })
                        @Html.ValidationMessageFor(model => model.ClassId, "", new { @class = "text-danger" })

                    </div>
                </div>

            </div>

            <div class="row">
                <div class="form-group">
                    <label class="control-label col-md-2">Selected&nbsp;Subject<abbr title="required">*</abbr></label>
                    <div class="col-md-5">

                        <input type="hidden" id="ParentCategoryId" name="ParentCategoryId" value="@ViewBag.ParentCategoryId" onclick='fillSelectedPath(this.value());' />
                        <span id="showSelected" style="font-size:larger;font-weight:100;">Root</span>
                        <p class="help-block"></p>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-3">
                    <input type="text" name="QuizName" value="@Model.QuizName" placeholder="Search for Quiz Name..." class="form-control">
                </div>

                <div class="col-lg-3">
                    @*<select id="ddlfreetypeId" name="FreeTypeId" class="form-control"></select>*@
                    @Html.DropDownListFor(model => model.FreeTypeId, new SelectList(ViewBag.FreeTypesQuestion, "KeywordValue", "KeywordText"), "--Select Question Type--", new { @class = "form-control" })
                </div>
                <div class="col-lg-3">

                    <input type="text" id="StartDate" name="StartDate" placeholder="Search for From Date.." value="@ViewBag.StartDate" class="form-control">
                </div>
                <div class="col-lg-3">

                    <input type="text" id="EndDate" name="EndDate" placeholder="Search for Till Date.." value="@ViewBag.EndDate" class="form-control">
                </div>

            </div>
            <br />
            <div class="row">
                <div class="col-lg-3">
                    <span style="color:black">Total Test Pepar:-</span>
                    <span style="font-size:large;color:black">@ViewBag.QuizeList</span>
                </div>
                <div class="col-lg-2">
                    <button type="submit" class="btn btn-primary">Search Now</button>
                </div>
            </div>
        </div>


    }

    @Html.Raw(ViewBag.Message)
    <div class="col-sm-12">
        <div class="cstmTbl">
            @grid.GetHtml(
        tableStyle: "table table-bordered table-responsive", // applying style on grid
        fillEmptyRows: false,
                    //show empty row when there is only one record on page to it will display all empty rows there.
        headerStyle: "header", //applying style.
        footerStyle: "grid-footer", //applying style.
        mode: WebGridPagerModes.All, //paging to grid
        firstText: "<< First",
        previousText: "< Prev",
        nextText: "Next >",
        lastText: "Last >>",
        columns: new[]  // colums in grid
        {

            grid.Column("QuizId", "Quiz Paper Id"),
            grid.Column("QuizName","Test Paper Name"),
            grid.Column("PaperTypeId","Paper Type"),
            grid.Column("ClassId","Class Id"),
            grid.Column("SubjectId","Subject"),
            grid.Column("TotalScore","Total Score"),
            grid.Column("TotalTimeInSecond","Total Time In Second"),
            grid.Column("FreeTypeId","Free Type"),

            grid.Column("Price","Price"),
            grid.Column("IsActive","Status"),
            grid.Column("IsPublish","Publish"),
            grid.Column("CreatedBy","Created By"),
            grid.Column("CreatedOn","Created On",format: (item) => TimeZoneInfo.ConvertTime(item.CreatedOn, est).ToString("dd MMM yyyy hh:mm tt")),
            grid.Column("Edit",format: (item) => @Html.ActionLink("Edit", "Edit", new {QuizId = item.QuizId}), style: "webGridIcon"),
             grid.Column("Add Question",format: (item) => @Html.ActionLink("Add Question", "Details", new {ClassId=item.ClassId,SubjectId=item.SubjectId, QuizId = item.QuizId }), style: "webGridIcon"),
        })

        </div>
    </div>
</div>
@section Scripts
     {

    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/assets/OlympaidCategory/createQuestioncategory.js"></script>

    <script type="text/javascript">
        $('#btnResetCategory').on("click", function () {
            $('#ParentCategoryId').val(0);
            $('#showSelected').html('Root');
            fillCategory(0);
        });

    </script>
    <script src="~/Scripts/jquery.datetimepicker.js"></script>
    <script>
        $('#StartDate').datetimepicker(
                        {
                            datepicker: true,
                            timepicker: true,
                            //format: 'd M, Y',
                            format: 'd M Y H:i',
                            // minDate: 0,
                            //MinTime:30,
                            step: 30
                        });
    </script>
    <script>
        $('#EndDate').datetimepicker(
                        {
                            datepicker: true,
                            timepicker: true,
                            //format: 'd M, Y',
                            format: 'd M Y H:i',

                            //MinTime:30,
                            step: 30
                        });
    </script>

<script type="text/javascript">
    $(function () {

        debugger;
        $('#StudentClass').on('change', function () {
            debugger;
            var subjectDropdown = $('#subjectDropdown');
            //disable city drop down
            subjectDropdown.prop('disabled', 'disabled');
            //clear drop down of old city
            subjectDropdown.empty();

            //retrieve selected subject
            var stdclass = $(this).val();
            if (stdclass.length > 0) {
                // retrieve data using a Url.Action() to construct url
                $.getJSON('@Url.Action("GetSubjects")', {
                    id: stdclass
                })
                .success(function (data) {
                    // prompt('', JSON.stringify(data));
                    //re-enable city drop down
                    subjectDropdown.removeProp('disabled');
                    //for each returned state
                   
                    $('#subjectDropdown').append("--Select Class--");
                    $.each(data, function (i, subject) {
                        //Create new option

                        $('<option>').val(subject.SubjectId).text(subject.SubjectName).appendTo('#subjectDropdown');
                        //var option = $('<option />').html(stdclass);
                        ////append city states drop down
                        //classDropdown.append(option);
                    });
                })
                .fail(function (jqxhr, textStatus, error) {
                    alert("something went wrong");
                    var err = textStatus + ", " + error;
                    console.log("Request Failed: " + err);
                });
            }
        });
    })
</script>

<script type="text/javascript">
    $(function () {


        debugger;
        $('#Subject').on('change', function () {
            debugger;
            var classDropdown = $('#classDropdown');
            //disable city drop down
            classDropdown.prop('disabled', 'disabled');
            //clear drop down of old city
            classDropdown.empty();

            //retrieve selected subject
            var subject = $(this).val();
            if (subject.length > 0) {
                // retrieve data using a Url.Action() to construct url
                $.getJSON('@Url.Action("GetClasses")', {
                    id: subject
                })
                .success(function (data) {
                    // prompt('', JSON.stringify(data));
                    //re-enable city drop down
                    classDropdown.removeProp('disabled');
                    //for each returned state
                    $('<option>').val('0').text('--Select Class--').appendTo('#classDropdown');
                    $.each(data, function (i, classes) {
                        //Create new option

                        $('<option>').val(classes.StudentClassId).text(classes.ClassName).appendTo('#classDropdown');
                        //var option = $('<option />').html(stdclass);
                        ////append city states drop down
                        //classDropdown.append(option);
                    });
                })
                .fail(function (jqxhr, textStatus, error) {
                    alert("something went wrong");
                    var err = textStatus + ", " + error;
                    console.log("Request Failed: " + err);
                });
            }
        });
    })
</script>



}
