<style>

    .form-control {
    color: #444;
    background-color: #f2f2f2;
    
}

</style>
  
@model ApsMind.Olympiad.Framework.Entity.PackageViewModel

@{
    ViewBag.Title = "Create";
    
    AjaxOptions options = new AjaxOptions
    {
        UpdateTargetId = "searchResult",
        Confirm = "Are you sure to start search?",
        InsertionMode = InsertionMode.Replace,
        LoadingElementId = "divLoading"
    };
}
<div class="mar">
    <div class="row">
        <div class="col-md-12">
            <div class="page-title">
                <h2 class="">Add Package</h2>

            </div>
        </div>
    </div>

    @using (Html.BeginForm("CreatePackage", "Quiz", FormMethod.Post, new { enctype = "Multipart/form-data" }))
    {
        @Html.Raw(ViewBag.Message)
        <div class="form-horizontal">

            <hr />
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.PackageId)
            <div class="form-group">
                @Html.LabelFor(model => model.PackageName, new { @class = "control-label col-md-2 col-sm-3" })
                <div class="col-md-4 col-sm-8 col-xs-12">
                    @Html.TextBoxFor(model => model.PackageName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PackageName)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Description, new { @class = "control-label col-md-2 col-sm-3" })
                <div class="col-md-4 col-sm-8 col-xs-12">
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Description)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Price, new { @class = "control-label col-md-2 col-sm-3" })
                <div class="col-md-4 col-sm-8 col-xs-12">
                    @Html.TextBoxFor(model => model.Price, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Price)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.BundlePrice, new { @class = "control-label col-md-2 col-sm-3" })
                <div class="col-md-4 col-sm-8 col-xs-12">
                    @Html.TextBoxFor(model => model.BundlePrice, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BundlePrice)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.IsActive, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.CheckBoxFor(model => model.IsActive, new { @checked = "checked" })
                    @Html.ValidationMessageFor(model => model.IsActive)
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-12">
                    @using (Ajax.BeginForm("SearchPeople", options))
                    {
                        <div id="divLoading" style="color:red;width:200px;background-color:yellow;font-size:larger;display:none;position:absolute;">Loading ....</div>
                        <div>
                            <div class="col-md-3">
                                @Html.DropDownListFor(model => model.SubjectId, new SelectList((SelectList)TempData["Subject"], "value", "text"), "--Select Subject--", new { @class = "form-control", @Id = "Subject" })
                                @Html.ValidationMessageFor(model => model.SubjectId)
                            </div>
                            <div class="col-md-3">
                                @Html.DropDownList("class", new SelectList(string.Empty, "Value", "Text"), "--Select Class--", new { @class = "form-control", @id = "classDropdown" })


                            </div>

                            <div class="col-md-3">
                                @Html.DropDownListFor(model => model.PaperTypeId, new SelectList((SelectList)TempData["PaperType"], "value", "text"), "--Select PaperType--", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PaperTypeId)
                            </div>
                            <div class="col-md-3">
                                <input type="submit" value="Search" class="btn btn-success" />
                            </div>
                        </div>
                    }

                 
                </div>
                
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-danger" />
                </div>
            </div>
        </div>

    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        function ShowpImagePreview(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#ImageUrl').attr('src', e.target.result);
                }
                reader.readAsDataURL(input.files[0]);
            }
        }
    </script>
<script type="text/javascript">
    $(function () {
        debugger;
        $('#Subject').on('change', function () {
            var classDropdown = $('#classDropdown');
            //disable city drop down
            classDropdown.prop('disabled', 'disabled');
            //clear drop down of old city
            classDropdown.empty();

            //retrieve selected subject
            var subject = $(this).val();
            if (subject.length > 0) {
                // retrieve data using a Url.Action() to construct url
                $.getJSON('@Url.Action("GetClasses")', {
                    subject_id: subject
                })
                .success(function (data) {
                    // prompt('', JSON.stringify(data));
                    //re-enable city drop down
                    classDropdown.removeProp('disabled');
                    //for each returned state
                    $.each(data, function (i, stdclass) {
                        //Create new option

                        $('<option>').val(stdclass.StudentClassId).text(stdclass.ClassName).appendTo('#classDropdown');
                        //var option = $('<option />').html(stdclass);
                        ////append city states drop down
                        //classDropdown.append(option);
                    });
                })
                .fail(function (jqxhr, textStatus, error) {
                    alert("something went wrong");
                    var err = textStatus + ", " + error;
                    console.log("Request Failed: " + err);
                });
            }
        });
    })
</script>



}
    