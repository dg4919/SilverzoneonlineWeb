@model ApsMind.Olympiad.Framework.Entity.Chapter

@{
    ViewBag.Title = "Create";
}
<div class="mar">
    <div class="row">
        <div class="col-md-12">
            <div class="page-title">
                <h2 class="">Add Chapter</h2>

            </div>
        </div>
    </div>

    @using (Html.BeginForm("Edit", "Chapter", FormMethod.Post, new { enctype = "Multipart/form-data" }))
    {
        @Html.Raw(ViewBag.Message)
        <div class="form-horizontal">

            <hr />
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.ChapterId)
            <div class="form-group">
                @Html.LabelFor(model => model.ChapterName, new { @class = "control-label col-md-2 col-sm-3" })
                <div class="col-md-4 col-sm-8 col-xs-12">
                    @Html.TextBoxFor(model => model.ChapterName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ChapterName)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Description, new { @class = "control-label col-md-2 col-sm-3" })
                <div class="col-md-4 col-sm-8 col-xs-12">
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Description)
                </div>
            </div>
            <div class="form-group">

                @Html.LabelFor(model => model.SubjectId, new { @class = "control-label col-md-2 col-sm-3" })

                <div class="col-md-4 col-sm-8 col-xs-12">
                    @Html.DropDownListFor(model => model.SubjectId, new SelectList((SelectList)TempData["Subject"], "value", "text"), "--Select Subject--", new { @class = "form-control", @Id = "Subject" })
                    @Html.ValidationMessageFor(model => model.SubjectId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">Class<abbr title="required">*</abbr></label>
                <div class="col-md-4 col-sm-8 col-xs-12">
                    @*@Html.DropDownList("subject", new SelectList(Model.SubjectId, "SubjectId", "SubjectName"), "--Select Subject--", new { @class = "form-control", @id = "subjectDropdown" })*@
                    @Html.DropDownListFor(model=>model.ClassId, new SelectList((SelectList)TempData["StudentClass"], "Value", "Text"), "--Select Class--", new { @class = "form-control", @id = "classDropdown" })
                    @Html.ValidationMessageFor(model => model.ClassId, "", new { @class = "text-danger" })

                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.PaperTypeId, new { @class = "control-label col-md-2 col-sm-3" })
                <div class="col-md-4 col-sm-8 col-xs-12">
                    @Html.DropDownListFor(model => model.PaperTypeId, new SelectList((SelectList)TempData["PaperType"], "value", "text"), "--Select PaperType--", new { @class = "form-control", @Id = "PaperType" })
                    @Html.ValidationMessageFor(model => model.PaperTypeId)

                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.IsActive, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.CheckBoxFor(model => model.IsActive, new { @checked = "checked" })
                    @Html.ValidationMessageFor(model => model.IsActive)
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-danger" />
                </div>
            </div>
        </div>

    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
 function ShowpImagePreview(input) {
 if (input.files && input.files[0]) {
   var reader = new FileReader();
    reader.onload = function (e) {
    $('#ImageUrl').attr('src', e.target.result);
   }
  reader.readAsDataURL(input.files[0]);
  }
  }
    </script>
  
    <script type="text/javascript">
    $(function () {


        debugger;
        $('#Subject').on('change', function () {
            debugger;
            var classDropdown = $('#classDropdown');
            //disable city drop down
            classDropdown.prop('disabled', 'disabled');
            //clear drop down of old city
            classDropdown.empty();

            //retrieve selected subject
            var subject = $(this).val();
            if (subject.length > 0) {
                // retrieve data using a Url.Action() to construct url
                $.getJSON('@Url.Action("GetClasses")', {
                    id: subject
                })
                .success(function (data) {
                    // prompt('', JSON.stringify(data));
                    //re-enable city drop down
                    classDropdown.removeProp('disabled');
                    //for each returned state
                    $('<option>').val('0').text('--Select Class--').appendTo('#classDropdown');
                    $.each(data, function (i, classes) {
                        //Create new option

                        $('<option>').val(classes.StudentClassId).text(classes.ClassName).appendTo('#classDropdown');
                        //var option = $('<option />').html(stdclass);
                        ////append city states drop down
                        //classDropdown.append(option);
                    });
                })
                .fail(function (jqxhr, textStatus, error) {
                    alert("something went wrong");
                    var err = textStatus + ", " + error;
                    console.log("Request Failed: " + err);
                });
            }
        });
    })
    </script>

}
